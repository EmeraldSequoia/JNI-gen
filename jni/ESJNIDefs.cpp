//   THIS FILE IS AUTOGENERATED.  DO NOT EDIT.
//   THIS FILE IS AUTOGENERATED.  DO NOT EDIT.
//   THIS FILE IS AUTOGENERATED.  DO NOT EDIT.
//
//   ESJNIDefs.cpp
//
//   THIS FILE IS AUTOGENERATED.  DO NOT EDIT.
//   THIS FILE IS AUTOGENERATED.  DO NOT EDIT.
//   THIS FILE IS AUTOGENERATED.  DO NOT EDIT.
//
//   This file contains the generated class definitions for Java classes, methods, and fields referenced from JNI.
//   It was generated from the descriptor file ESJNI.defs.
//

#include "ESJNIDefs.hpp"

#include "ESErrorReporter.hpp"

#include <stdio.h>  // for NULL (?)

// *************************************************************************
// *************************************************************************

// Class ESJNI_android_app_Activity (from Java path android/app/Activity)

// *************************************************************************
// *************************************************************************

/*static*/ jclass ESJNI_android_app_Activity::_javaClass = NULL;
/*static*/ jmethodID ESJNI_android_app_Activity::_methodID1_getPreferences = 0;
/*static*/ jmethodID ESJNI_android_app_Activity::_methodID2_findViewById = 0;
/*static*/ jmethodID ESJNI_android_app_Activity::_methodID3_getSystemService = 0;
/*static*/ jmethodID ESJNI_android_app_Activity::_methodID4_getFilesDir = 0;
/*static*/ jmethodID ESJNI_android_app_Activity::_methodID5_getAssets = 0;

ESJNI_android_app_Activity::ESJNI_android_app_Activity()
{
}

ESJNI_android_app_Activity::ESJNI_android_app_Activity(jobject jobj)
:   ESJNIBase(jobj)
{
}

ESJNI_android_app_Activity::ESJNI_android_app_Activity(const ESJNI_android_app_Activity &other)
:   ESJNIBase(other)
{
}

ESJNI_android_app_Activity::ESJNI_android_app_Activity(jobject jobj, bool retained)
:   ESJNIBase(jobj, retained)
{
}

ESJNI_android_app_Activity
ESJNI_android_app_Activity::getRetainedCopy(JNIEnv *jniEnv) const {
    ESAssert(_javaObject);
    return ESJNI_android_app_Activity(jniEnv->NewGlobalRef(_javaObject), true/*retained*/);
}

ESJNI_android_app_Activity &
ESJNI_android_app_Activity::operator=(const ESJNI_android_app_Activity &other) {
    _retained = other._retained;
    _javaObject = other._javaObject;
}

/*static*/ void
ESJNI_android_app_Activity::initAndRetain(JNIEnv *jniEnv) {
    ESAssert(_javaClass == NULL);  // Only call once
    _javaClass = jniEnv->FindClass("android/app/Activity");
    ESAssert(_javaClass);
    _javaClass = (jclass)jniEnv->NewGlobalRef(_javaClass);
}

// *****    Declared methods

ESJNI_android_location_LocationListener    &
ESJNI_android_app_Activity::castAs_android_location_LocationListener   () const {
    return *((ESJNI_android_location_LocationListener    *)this);
}

ESJNI_android_content_SharedPreferences
ESJNI_android_app_Activity::getPreferences(JNIEnv *jniEnv,
                                           int    P1) {
    ESAssert(_javaObject); // Initialize first (retain is not necessary for the object)
    ESAssert(_javaClass);  // Call ESJNI_android_app_Activity::initAndRetain first
    if (!_methodID1_getPreferences) {
        _methodID1_getPreferences = jniEnv->GetMethodID(_javaClass, "getPreferences", "(I)Landroid/content/SharedPreferences;");
        ESAssert(_methodID1_getPreferences);
    }
    return ESJNI_android_content_SharedPreferences(jniEnv->CallObjectMethod(_javaObject, _methodID1_getPreferences, P1));
}

ESJNI_android_view_View
ESJNI_android_app_Activity::findViewById(JNIEnv *jniEnv,
                                         int    P1) {
    ESAssert(_javaObject); // Initialize first (retain is not necessary for the object)
    ESAssert(_javaClass);  // Call ESJNI_android_app_Activity::initAndRetain first
    if (!_methodID2_findViewById) {
        _methodID2_findViewById = jniEnv->GetMethodID(_javaClass, "findViewById", "(I)Landroid/view/View;");
        ESAssert(_methodID2_findViewById);
    }
    return ESJNI_android_view_View(jniEnv->CallObjectMethod(_javaObject, _methodID2_findViewById, P1));
}

ESJNI_java_lang_Object
ESJNI_android_app_Activity::getSystemService(JNIEnv                 *jniEnv,
                                             ESJNI_java_lang_String P1) {
    ESAssert(_javaObject); // Initialize first (retain is not necessary for the object)
    ESAssert(_javaClass);  // Call ESJNI_android_app_Activity::initAndRetain first
    if (!_methodID3_getSystemService) {
        _methodID3_getSystemService = jniEnv->GetMethodID(_javaClass, "getSystemService", "(Ljava/lang/String;)Ljava/lang/Object;");
        ESAssert(_methodID3_getSystemService);
    }
    return ESJNI_java_lang_Object(jniEnv->CallObjectMethod(_javaObject, _methodID3_getSystemService, P1.toJObject(jniEnv)));
}

ESJNI_java_io_File
ESJNI_android_app_Activity::getFilesDir(JNIEnv *jniEnv) {
    ESAssert(_javaObject); // Initialize first (retain is not necessary for the object)
    ESAssert(_javaClass);  // Call ESJNI_android_app_Activity::initAndRetain first
    if (!_methodID4_getFilesDir) {
        _methodID4_getFilesDir = jniEnv->GetMethodID(_javaClass, "getFilesDir", "()Ljava/io/File;");
        ESAssert(_methodID4_getFilesDir);
    }
    return ESJNI_java_io_File(jniEnv->CallObjectMethod(_javaObject, _methodID4_getFilesDir));
}

ESJNI_android_content_res_AssetManager
ESJNI_android_app_Activity::getAssets(JNIEnv *jniEnv) {
    ESAssert(_javaObject); // Initialize first (retain is not necessary for the object)
    ESAssert(_javaClass);  // Call ESJNI_android_app_Activity::initAndRetain first
    if (!_methodID5_getAssets) {
        _methodID5_getAssets = jniEnv->GetMethodID(_javaClass, "getAssets", "()Landroid/content/res/AssetManager;");
        ESAssert(_methodID5_getAssets);
    }
    return ESJNI_android_content_res_AssetManager(jniEnv->CallObjectMethod(_javaObject, _methodID5_getAssets));
}

// *************************************************************************
// *************************************************************************

// Class ESJNI_android_content_res_AssetManager (from Java path android/content/res/AssetManager)

// *************************************************************************
// *************************************************************************

/*static*/ jclass ESJNI_android_content_res_AssetManager::_javaClass = NULL;
/*static*/ jmethodID ESJNI_android_content_res_AssetManager::_methodID1_openFd = 0;

ESJNI_android_content_res_AssetManager::ESJNI_android_content_res_AssetManager()
{
}

ESJNI_android_content_res_AssetManager::ESJNI_android_content_res_AssetManager(jobject jobj)
:   ESJNIBase(jobj)
{
}

ESJNI_android_content_res_AssetManager::ESJNI_android_content_res_AssetManager(const ESJNI_android_content_res_AssetManager &other)
:   ESJNIBase(other)
{
}

ESJNI_android_content_res_AssetManager::ESJNI_android_content_res_AssetManager(jobject jobj, bool retained)
:   ESJNIBase(jobj, retained)
{
}

ESJNI_android_content_res_AssetManager
ESJNI_android_content_res_AssetManager::getRetainedCopy(JNIEnv *jniEnv) const {
    ESAssert(_javaObject);
    return ESJNI_android_content_res_AssetManager(jniEnv->NewGlobalRef(_javaObject), true/*retained*/);
}

ESJNI_android_content_res_AssetManager &
ESJNI_android_content_res_AssetManager::operator=(const ESJNI_android_content_res_AssetManager &other) {
    _retained = other._retained;
    _javaObject = other._javaObject;
}

/*static*/ void
ESJNI_android_content_res_AssetManager::initAndRetain(JNIEnv *jniEnv) {
    ESAssert(_javaClass == NULL);  // Only call once
    _javaClass = jniEnv->FindClass("android/content/res/AssetManager");
    ESAssert(_javaClass);
    _javaClass = (jclass)jniEnv->NewGlobalRef(_javaClass);
}

// *****    Declared methods

ESJNI_android_content_res_AssetFileDescriptor
ESJNI_android_content_res_AssetManager::openFd(JNIEnv                 *jniEnv,
                                               ESJNI_java_lang_String P1) {
    ESAssert(_javaObject); // Initialize first (retain is not necessary for the object)
    ESAssert(_javaClass);  // Call ESJNI_android_content_res_AssetManager::initAndRetain first
    if (!_methodID1_openFd) {
        _methodID1_openFd = jniEnv->GetMethodID(_javaClass, "openFd", "(Ljava/lang/String;)Landroid/content/res/AssetFileDescriptor;");
        ESAssert(_methodID1_openFd);
    }
    return ESJNI_android_content_res_AssetFileDescriptor(jniEnv->CallObjectMethod(_javaObject, _methodID1_openFd, P1.toJObject(jniEnv)));
}

// *************************************************************************
// *************************************************************************

// Class ESJNI_android_content_res_AssetFileDescriptor (from Java path android/content/res/AssetFileDescriptor)

// *************************************************************************
// *************************************************************************

/*static*/ jclass ESJNI_android_content_res_AssetFileDescriptor::_javaClass = NULL;
/*static*/ jmethodID ESJNI_android_content_res_AssetFileDescriptor::_methodID1_getStartOffset = 0;
/*static*/ jmethodID ESJNI_android_content_res_AssetFileDescriptor::_methodID2_getLength = 0;
/*static*/ jmethodID ESJNI_android_content_res_AssetFileDescriptor::_methodID3_getFileDescriptor = 0;

ESJNI_android_content_res_AssetFileDescriptor::ESJNI_android_content_res_AssetFileDescriptor()
{
}

ESJNI_android_content_res_AssetFileDescriptor::ESJNI_android_content_res_AssetFileDescriptor(jobject jobj)
:   ESJNIBase(jobj)
{
}

ESJNI_android_content_res_AssetFileDescriptor::ESJNI_android_content_res_AssetFileDescriptor(const ESJNI_android_content_res_AssetFileDescriptor &other)
:   ESJNIBase(other)
{
}

ESJNI_android_content_res_AssetFileDescriptor::ESJNI_android_content_res_AssetFileDescriptor(jobject jobj, bool retained)
:   ESJNIBase(jobj, retained)
{
}

ESJNI_android_content_res_AssetFileDescriptor
ESJNI_android_content_res_AssetFileDescriptor::getRetainedCopy(JNIEnv *jniEnv) const {
    ESAssert(_javaObject);
    return ESJNI_android_content_res_AssetFileDescriptor(jniEnv->NewGlobalRef(_javaObject), true/*retained*/);
}

ESJNI_android_content_res_AssetFileDescriptor &
ESJNI_android_content_res_AssetFileDescriptor::operator=(const ESJNI_android_content_res_AssetFileDescriptor &other) {
    _retained = other._retained;
    _javaObject = other._javaObject;
}

/*static*/ void
ESJNI_android_content_res_AssetFileDescriptor::initAndRetain(JNIEnv *jniEnv) {
    ESAssert(_javaClass == NULL);  // Only call once
    _javaClass = jniEnv->FindClass("android/content/res/AssetFileDescriptor");
    ESAssert(_javaClass);
    _javaClass = (jclass)jniEnv->NewGlobalRef(_javaClass);
}

// *****    Declared methods

long
ESJNI_android_content_res_AssetFileDescriptor::getStartOffset(JNIEnv *jniEnv) {
    ESAssert(_javaObject); // Initialize first (retain is not necessary for the object)
    ESAssert(_javaClass);  // Call ESJNI_android_content_res_AssetFileDescriptor::initAndRetain first
    if (!_methodID1_getStartOffset) {
        _methodID1_getStartOffset = jniEnv->GetMethodID(_javaClass, "getStartOffset", "()J");
        ESAssert(_methodID1_getStartOffset);
    }
    return long(jniEnv->CallLongMethod(_javaObject, _methodID1_getStartOffset));
}

long
ESJNI_android_content_res_AssetFileDescriptor::getLength(JNIEnv *jniEnv) {
    ESAssert(_javaObject); // Initialize first (retain is not necessary for the object)
    ESAssert(_javaClass);  // Call ESJNI_android_content_res_AssetFileDescriptor::initAndRetain first
    if (!_methodID2_getLength) {
        _methodID2_getLength = jniEnv->GetMethodID(_javaClass, "getLength", "()J");
        ESAssert(_methodID2_getLength);
    }
    return long(jniEnv->CallLongMethod(_javaObject, _methodID2_getLength));
}

ESJNI_java_io_FileDescriptor
ESJNI_android_content_res_AssetFileDescriptor::getFileDescriptor(JNIEnv *jniEnv) {
    ESAssert(_javaObject); // Initialize first (retain is not necessary for the object)
    ESAssert(_javaClass);  // Call ESJNI_android_content_res_AssetFileDescriptor::initAndRetain first
    if (!_methodID3_getFileDescriptor) {
        _methodID3_getFileDescriptor = jniEnv->GetMethodID(_javaClass, "getFileDescriptor", "()Ljava/io/FileDescriptor;");
        ESAssert(_methodID3_getFileDescriptor);
    }
    return ESJNI_java_io_FileDescriptor(jniEnv->CallObjectMethod(_javaObject, _methodID3_getFileDescriptor));
}

// *************************************************************************
// *************************************************************************

// Class ESJNI_java_io_FileDescriptor (from Java path java/io/FileDescriptor)

// *************************************************************************
// *************************************************************************

/*static*/ jclass ESJNI_java_io_FileDescriptor::_javaClass = NULL;
/*static*/ jfieldID ESJNI_java_io_FileDescriptor::_fieldID1_fd = 0;
/*static*/ jfieldID ESJNI_java_io_FileDescriptor::_fieldID2_descriptor = 0;

ESJNI_java_io_FileDescriptor::ESJNI_java_io_FileDescriptor()
{
}

ESJNI_java_io_FileDescriptor::ESJNI_java_io_FileDescriptor(jobject jobj)
:   ESJNIBase(jobj)
{
}

ESJNI_java_io_FileDescriptor::ESJNI_java_io_FileDescriptor(const ESJNI_java_io_FileDescriptor &other)
:   ESJNIBase(other)
{
}

ESJNI_java_io_FileDescriptor::ESJNI_java_io_FileDescriptor(jobject jobj, bool retained)
:   ESJNIBase(jobj, retained)
{
}

ESJNI_java_io_FileDescriptor
ESJNI_java_io_FileDescriptor::getRetainedCopy(JNIEnv *jniEnv) const {
    ESAssert(_javaObject);
    return ESJNI_java_io_FileDescriptor(jniEnv->NewGlobalRef(_javaObject), true/*retained*/);
}

ESJNI_java_io_FileDescriptor &
ESJNI_java_io_FileDescriptor::operator=(const ESJNI_java_io_FileDescriptor &other) {
    _retained = other._retained;
    _javaObject = other._javaObject;
}

/*static*/ void
ESJNI_java_io_FileDescriptor::initAndRetain(JNIEnv *jniEnv) {
    ESAssert(_javaClass == NULL);  // Only call once
    _javaClass = jniEnv->FindClass("java/io/FileDescriptor");
    ESAssert(_javaClass);
    _javaClass = (jclass)jniEnv->NewGlobalRef(_javaClass);
}

// *****    Declared methods

int
ESJNI_java_io_FileDescriptor::fdField(JNIEnv *jniEnv) const {
    ESAssert(_javaObject); // Initialize first (retain is not necessary for the object)
    ESAssert(_javaClass);  // Call ESJNI_java_io_FileDescriptor::initAndRetain first
    if (!_fieldID1_fd) {
        _fieldID1_fd = jniEnv->GetFieldID(_javaClass, "fd", "I");
        ESAssert(_fieldID1_fd);
    }
    return int(jniEnv->GetIntField(_javaObject, _fieldID1_fd));
}

void
ESJNI_java_io_FileDescriptor::setFdField(JNIEnv *jniEnv, int val) {
    ESAssert(_javaObject); // Initialize first (retain is not necessary for the object)
    ESAssert(_javaClass);  // Call ESJNI_java_io_FileDescriptor::initAndRetain first
    if (!_fieldID1_fd) {
        _fieldID1_fd = jniEnv->GetFieldID(_javaClass, "fd", "I");
        ESAssert(_fieldID1_fd);
    }
    jniEnv->SetIntField(_javaObject, _fieldID1_fd, val);
}

/*static*/ bool
ESJNI_java_io_FileDescriptor::fdFieldValid(JNIEnv *jniEnv) {
    ESAssert(_javaClass);  // Call ESJNI_java_io_FileDescriptor::initAndRetain first
    if (!_fieldID1_fd) {
        _fieldID1_fd = jniEnv->GetFieldID(_javaClass, "fd", "I");
        if (jniEnv->ExceptionCheck()) {
            jniEnv->ExceptionClear();
        }
    }
    return _fieldID1_fd != NULL;
}

int
ESJNI_java_io_FileDescriptor::descriptorField(JNIEnv *jniEnv) const {
    ESAssert(_javaObject); // Initialize first (retain is not necessary for the object)
    ESAssert(_javaClass);  // Call ESJNI_java_io_FileDescriptor::initAndRetain first
    if (!_fieldID2_descriptor) {
        _fieldID2_descriptor = jniEnv->GetFieldID(_javaClass, "descriptor", "I");
        ESAssert(_fieldID2_descriptor);
    }
    return int(jniEnv->GetIntField(_javaObject, _fieldID2_descriptor));
}

void
ESJNI_java_io_FileDescriptor::setDescriptorField(JNIEnv *jniEnv, int val) {
    ESAssert(_javaObject); // Initialize first (retain is not necessary for the object)
    ESAssert(_javaClass);  // Call ESJNI_java_io_FileDescriptor::initAndRetain first
    if (!_fieldID2_descriptor) {
        _fieldID2_descriptor = jniEnv->GetFieldID(_javaClass, "descriptor", "I");
        ESAssert(_fieldID2_descriptor);
    }
    jniEnv->SetIntField(_javaObject, _fieldID2_descriptor, val);
}

/*static*/ bool
ESJNI_java_io_FileDescriptor::descriptorFieldValid(JNIEnv *jniEnv) {
    ESAssert(_javaClass);  // Call ESJNI_java_io_FileDescriptor::initAndRetain first
    if (!_fieldID2_descriptor) {
        _fieldID2_descriptor = jniEnv->GetFieldID(_javaClass, "descriptor", "I");
        if (jniEnv->ExceptionCheck()) {
            jniEnv->ExceptionClear();
        }
    }
    return _fieldID2_descriptor != NULL;
}

// *************************************************************************
// *************************************************************************

// Class ESJNI_android_content_SharedPreferences (from Java path android/content/SharedPreferences)

// *************************************************************************
// *************************************************************************

/*static*/ jclass ESJNI_android_content_SharedPreferences::_javaClass = NULL;
/*static*/ jmethodID ESJNI_android_content_SharedPreferences::_methodID1_getBoolean = 0;
/*static*/ jmethodID ESJNI_android_content_SharedPreferences::_methodID2_getString = 0;
/*static*/ jmethodID ESJNI_android_content_SharedPreferences::_methodID3_edit = 0;

ESJNI_android_content_SharedPreferences::ESJNI_android_content_SharedPreferences()
{
}

ESJNI_android_content_SharedPreferences::ESJNI_android_content_SharedPreferences(jobject jobj)
:   ESJNIBase(jobj)
{
}

ESJNI_android_content_SharedPreferences::ESJNI_android_content_SharedPreferences(const ESJNI_android_content_SharedPreferences &other)
:   ESJNIBase(other)
{
}

ESJNI_android_content_SharedPreferences::ESJNI_android_content_SharedPreferences(jobject jobj, bool retained)
:   ESJNIBase(jobj, retained)
{
}

ESJNI_android_content_SharedPreferences
ESJNI_android_content_SharedPreferences::getRetainedCopy(JNIEnv *jniEnv) const {
    ESAssert(_javaObject);
    return ESJNI_android_content_SharedPreferences(jniEnv->NewGlobalRef(_javaObject), true/*retained*/);
}

ESJNI_android_content_SharedPreferences &
ESJNI_android_content_SharedPreferences::operator=(const ESJNI_android_content_SharedPreferences &other) {
    _retained = other._retained;
    _javaObject = other._javaObject;
}

/*static*/ void
ESJNI_android_content_SharedPreferences::initAndRetain(JNIEnv *jniEnv) {
    ESAssert(_javaClass == NULL);  // Only call once
    _javaClass = jniEnv->FindClass("android/content/SharedPreferences");
    ESAssert(_javaClass);
    _javaClass = (jclass)jniEnv->NewGlobalRef(_javaClass);
}

// *****    Declared methods

ESJBool
ESJNI_android_content_SharedPreferences::getBoolean(JNIEnv                 *jniEnv,
                                                    ESJNI_java_lang_String P1,
                                                    ESJBool                P2) {
    ESAssert(_javaObject); // Initialize first (retain is not necessary for the object)
    ESAssert(_javaClass);  // Call ESJNI_android_content_SharedPreferences::initAndRetain first
    if (!_methodID1_getBoolean) {
        _methodID1_getBoolean = jniEnv->GetMethodID(_javaClass, "getBoolean", "(Ljava/lang/String;Z)Z");
        ESAssert(_methodID1_getBoolean);
    }
    return ESJBool(jniEnv->CallBooleanMethod(_javaObject, _methodID1_getBoolean, P1.toJObject(jniEnv), P2.toJBool()));
}

ESJNI_java_lang_String
ESJNI_android_content_SharedPreferences::getString(JNIEnv                 *jniEnv,
                                                   ESJNI_java_lang_String P1,
                                                   ESJNI_java_lang_String P2) {
    ESAssert(_javaObject); // Initialize first (retain is not necessary for the object)
    ESAssert(_javaClass);  // Call ESJNI_android_content_SharedPreferences::initAndRetain first
    if (!_methodID2_getString) {
        _methodID2_getString = jniEnv->GetMethodID(_javaClass, "getString", "(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;");
        ESAssert(_methodID2_getString);
    }
    return ESJNI_java_lang_String(jniEnv->CallObjectMethod(_javaObject, _methodID2_getString, P1.toJObject(jniEnv), P2.toJObject(jniEnv)));
}

ESJNI_android_content_SharedPreferences_Editor
ESJNI_android_content_SharedPreferences::edit(JNIEnv *jniEnv) {
    ESAssert(_javaObject); // Initialize first (retain is not necessary for the object)
    ESAssert(_javaClass);  // Call ESJNI_android_content_SharedPreferences::initAndRetain first
    if (!_methodID3_edit) {
        _methodID3_edit = jniEnv->GetMethodID(_javaClass, "edit", "()Landroid/content/SharedPreferences$Editor;");
        ESAssert(_methodID3_edit);
    }
    return ESJNI_android_content_SharedPreferences_Editor(jniEnv->CallObjectMethod(_javaObject, _methodID3_edit));
}

// *************************************************************************
// *************************************************************************

// Class ESJNI_android_content_SharedPreferences_Editor (from Java path android/content/SharedPreferences$Editor)

// *************************************************************************
// *************************************************************************

/*static*/ jclass ESJNI_android_content_SharedPreferences_Editor::_javaClass = NULL;
/*static*/ jmethodID ESJNI_android_content_SharedPreferences_Editor::_methodID1_putBoolean = 0;
/*static*/ jmethodID ESJNI_android_content_SharedPreferences_Editor::_methodID2_putString = 0;
/*static*/ jmethodID ESJNI_android_content_SharedPreferences_Editor::_methodID3_apply = 0;

ESJNI_android_content_SharedPreferences_Editor::ESJNI_android_content_SharedPreferences_Editor()
{
}

ESJNI_android_content_SharedPreferences_Editor::ESJNI_android_content_SharedPreferences_Editor(jobject jobj)
:   ESJNIBase(jobj)
{
}

ESJNI_android_content_SharedPreferences_Editor::ESJNI_android_content_SharedPreferences_Editor(const ESJNI_android_content_SharedPreferences_Editor &other)
:   ESJNIBase(other)
{
}

ESJNI_android_content_SharedPreferences_Editor::ESJNI_android_content_SharedPreferences_Editor(jobject jobj, bool retained)
:   ESJNIBase(jobj, retained)
{
}

ESJNI_android_content_SharedPreferences_Editor
ESJNI_android_content_SharedPreferences_Editor::getRetainedCopy(JNIEnv *jniEnv) const {
    ESAssert(_javaObject);
    return ESJNI_android_content_SharedPreferences_Editor(jniEnv->NewGlobalRef(_javaObject), true/*retained*/);
}

ESJNI_android_content_SharedPreferences_Editor &
ESJNI_android_content_SharedPreferences_Editor::operator=(const ESJNI_android_content_SharedPreferences_Editor &other) {
    _retained = other._retained;
    _javaObject = other._javaObject;
}

/*static*/ void
ESJNI_android_content_SharedPreferences_Editor::initAndRetain(JNIEnv *jniEnv) {
    ESAssert(_javaClass == NULL);  // Only call once
    _javaClass = jniEnv->FindClass("android/content/SharedPreferences$Editor");
    ESAssert(_javaClass);
    _javaClass = (jclass)jniEnv->NewGlobalRef(_javaClass);
}

// *****    Declared methods

ESJNI_android_content_SharedPreferences_Editor
ESJNI_android_content_SharedPreferences_Editor::putBoolean(JNIEnv                 *jniEnv,
                                                           ESJNI_java_lang_String P1,
                                                           ESJBool                P2) {
    ESAssert(_javaObject); // Initialize first (retain is not necessary for the object)
    ESAssert(_javaClass);  // Call ESJNI_android_content_SharedPreferences_Editor::initAndRetain first
    if (!_methodID1_putBoolean) {
        _methodID1_putBoolean = jniEnv->GetMethodID(_javaClass, "putBoolean", "(Ljava/lang/String;Z)Landroid/content/SharedPreferences$Editor;");
        ESAssert(_methodID1_putBoolean);
    }
    return ESJNI_android_content_SharedPreferences_Editor(jniEnv->CallObjectMethod(_javaObject, _methodID1_putBoolean, P1.toJObject(jniEnv), P2.toJBool()));
}

ESJNI_android_content_SharedPreferences_Editor
ESJNI_android_content_SharedPreferences_Editor::putString(JNIEnv                 *jniEnv,
                                                          ESJNI_java_lang_String P1,
                                                          ESJNI_java_lang_String P2) {
    ESAssert(_javaObject); // Initialize first (retain is not necessary for the object)
    ESAssert(_javaClass);  // Call ESJNI_android_content_SharedPreferences_Editor::initAndRetain first
    if (!_methodID2_putString) {
        _methodID2_putString = jniEnv->GetMethodID(_javaClass, "putString", "(Ljava/lang/String;Ljava/lang/String;)Landroid/content/SharedPreferences$Editor;");
        ESAssert(_methodID2_putString);
    }
    return ESJNI_android_content_SharedPreferences_Editor(jniEnv->CallObjectMethod(_javaObject, _methodID2_putString, P1.toJObject(jniEnv), P2.toJObject(jniEnv)));
}

void
ESJNI_android_content_SharedPreferences_Editor::apply(JNIEnv *jniEnv) {
    ESAssert(_javaObject); // Initialize first (retain is not necessary for the object)
    ESAssert(_javaClass);  // Call ESJNI_android_content_SharedPreferences_Editor::initAndRetain first
    if (!_methodID3_apply) {
        _methodID3_apply = jniEnv->GetMethodID(_javaClass, "apply", "()V");
        ESAssert(_methodID3_apply);
    }
    jniEnv->CallVoidMethod(_javaObject, _methodID3_apply);
}

// *************************************************************************
// *************************************************************************

// Class ESJNI_java_util_Locale (from Java path java/util/Locale)

// *************************************************************************
// *************************************************************************

/*static*/ jclass ESJNI_java_util_Locale::_javaClass = NULL;
/*static*/ jmethodID ESJNI_java_util_Locale::_methodID1_getDefault = 0;
/*static*/ jmethodID ESJNI_java_util_Locale::_methodID2_getCountry = 0;

ESJNI_java_util_Locale::ESJNI_java_util_Locale()
{
}

ESJNI_java_util_Locale::ESJNI_java_util_Locale(jobject jobj)
:   ESJNIBase(jobj)
{
}

ESJNI_java_util_Locale::ESJNI_java_util_Locale(const ESJNI_java_util_Locale &other)
:   ESJNIBase(other)
{
}

ESJNI_java_util_Locale::ESJNI_java_util_Locale(jobject jobj, bool retained)
:   ESJNIBase(jobj, retained)
{
}

ESJNI_java_util_Locale
ESJNI_java_util_Locale::getRetainedCopy(JNIEnv *jniEnv) const {
    ESAssert(_javaObject);
    return ESJNI_java_util_Locale(jniEnv->NewGlobalRef(_javaObject), true/*retained*/);
}

ESJNI_java_util_Locale &
ESJNI_java_util_Locale::operator=(const ESJNI_java_util_Locale &other) {
    _retained = other._retained;
    _javaObject = other._javaObject;
}

/*static*/ void
ESJNI_java_util_Locale::initAndRetain(JNIEnv *jniEnv) {
    ESAssert(_javaClass == NULL);  // Only call once
    _javaClass = jniEnv->FindClass("java/util/Locale");
    ESAssert(_javaClass);
    _javaClass = (jclass)jniEnv->NewGlobalRef(_javaClass);
}

// *****    Declared methods

/*static*/ ESJNI_java_util_Locale
ESJNI_java_util_Locale::getDefault(JNIEnv *jniEnv) {
    ESAssert(_javaClass);  // Call ESJNI_java_util_Locale::initAndRetain first
    if (!_methodID1_getDefault) {
        _methodID1_getDefault = jniEnv->GetStaticMethodID(_javaClass, "getDefault", "()Ljava/util/Locale;");
        ESAssert(_methodID1_getDefault);
    }
    return ESJNI_java_util_Locale(jniEnv->CallStaticObjectMethod(_javaClass, _methodID1_getDefault));
}

ESJNI_java_lang_String
ESJNI_java_util_Locale::getCountry(JNIEnv *jniEnv) {
    ESAssert(_javaObject); // Initialize first (retain is not necessary for the object)
    ESAssert(_javaClass);  // Call ESJNI_java_util_Locale::initAndRetain first
    if (!_methodID2_getCountry) {
        _methodID2_getCountry = jniEnv->GetMethodID(_javaClass, "getCountry", "()Ljava/lang/String;");
        ESAssert(_methodID2_getCountry);
    }
    return ESJNI_java_lang_String(jniEnv->CallObjectMethod(_javaObject, _methodID2_getCountry));
}

// *************************************************************************
// *************************************************************************

// Class ESJNI_java_io_File (from Java path java/io/File)

// *************************************************************************
// *************************************************************************

/*static*/ jclass ESJNI_java_io_File::_javaClass = NULL;
/*static*/ jmethodID ESJNI_java_io_File::_methodID1_getPath = 0;

ESJNI_java_io_File::ESJNI_java_io_File()
{
}

ESJNI_java_io_File::ESJNI_java_io_File(jobject jobj)
:   ESJNIBase(jobj)
{
}

ESJNI_java_io_File::ESJNI_java_io_File(const ESJNI_java_io_File &other)
:   ESJNIBase(other)
{
}

ESJNI_java_io_File::ESJNI_java_io_File(jobject jobj, bool retained)
:   ESJNIBase(jobj, retained)
{
}

ESJNI_java_io_File
ESJNI_java_io_File::getRetainedCopy(JNIEnv *jniEnv) const {
    ESAssert(_javaObject);
    return ESJNI_java_io_File(jniEnv->NewGlobalRef(_javaObject), true/*retained*/);
}

ESJNI_java_io_File &
ESJNI_java_io_File::operator=(const ESJNI_java_io_File &other) {
    _retained = other._retained;
    _javaObject = other._javaObject;
}

/*static*/ void
ESJNI_java_io_File::initAndRetain(JNIEnv *jniEnv) {
    ESAssert(_javaClass == NULL);  // Only call once
    _javaClass = jniEnv->FindClass("java/io/File");
    ESAssert(_javaClass);
    _javaClass = (jclass)jniEnv->NewGlobalRef(_javaClass);
}

// *****    Declared methods

ESJNI_java_lang_String
ESJNI_java_io_File::getPath(JNIEnv *jniEnv) {
    ESAssert(_javaObject); // Initialize first (retain is not necessary for the object)
    ESAssert(_javaClass);  // Call ESJNI_java_io_File::initAndRetain first
    if (!_methodID1_getPath) {
        _methodID1_getPath = jniEnv->GetMethodID(_javaClass, "getPath", "()Ljava/lang/String;");
        ESAssert(_methodID1_getPath);
    }
    return ESJNI_java_lang_String(jniEnv->CallObjectMethod(_javaObject, _methodID1_getPath));
}

// *************************************************************************
// *************************************************************************

// Class ESJNI_android_widget_TextView (from Java path android/widget/TextView)

// *************************************************************************
// *************************************************************************

/*static*/ jclass ESJNI_android_widget_TextView::_javaClass = NULL;
/*static*/ jmethodID ESJNI_android_widget_TextView::_methodID1_getText = 0;
/*static*/ jmethodID ESJNI_android_widget_TextView::_methodID2_setText = 0;

ESJNI_android_widget_TextView::ESJNI_android_widget_TextView()
{
}

ESJNI_android_widget_TextView::ESJNI_android_widget_TextView(jobject jobj)
:   ESJNIBase(jobj)
{
}

ESJNI_android_widget_TextView::ESJNI_android_widget_TextView(const ESJNI_android_widget_TextView &other)
:   ESJNIBase(other)
{
}

ESJNI_android_widget_TextView::ESJNI_android_widget_TextView(jobject jobj, bool retained)
:   ESJNIBase(jobj, retained)
{
}

ESJNI_android_widget_TextView
ESJNI_android_widget_TextView::getRetainedCopy(JNIEnv *jniEnv) const {
    ESAssert(_javaObject);
    return ESJNI_android_widget_TextView(jniEnv->NewGlobalRef(_javaObject), true/*retained*/);
}

ESJNI_android_widget_TextView &
ESJNI_android_widget_TextView::operator=(const ESJNI_android_widget_TextView &other) {
    _retained = other._retained;
    _javaObject = other._javaObject;
}

/*static*/ void
ESJNI_android_widget_TextView::initAndRetain(JNIEnv *jniEnv) {
    ESAssert(_javaClass == NULL);  // Only call once
    _javaClass = jniEnv->FindClass("android/widget/TextView");
    ESAssert(_javaClass);
    _javaClass = (jclass)jniEnv->NewGlobalRef(_javaClass);
}

// *****    Declared methods

ESJNI_java_lang_CharSequence
ESJNI_android_widget_TextView::getText(JNIEnv *jniEnv) {
    ESAssert(_javaObject); // Initialize first (retain is not necessary for the object)
    ESAssert(_javaClass);  // Call ESJNI_android_widget_TextView::initAndRetain first
    if (!_methodID1_getText) {
        _methodID1_getText = jniEnv->GetMethodID(_javaClass, "getText", "()Ljava/lang/CharSequence;");
        ESAssert(_methodID1_getText);
    }
    return ESJNI_java_lang_CharSequence(jniEnv->CallObjectMethod(_javaObject, _methodID1_getText));
}

void
ESJNI_android_widget_TextView::setText(JNIEnv                       *jniEnv,
                                       ESJNI_java_lang_CharSequence P1) {
    ESAssert(_javaObject); // Initialize first (retain is not necessary for the object)
    ESAssert(_javaClass);  // Call ESJNI_android_widget_TextView::initAndRetain first
    if (!_methodID2_setText) {
        _methodID2_setText = jniEnv->GetMethodID(_javaClass, "setText", "(Ljava/lang/CharSequence;)V");
        ESAssert(_methodID2_setText);
    }
    jniEnv->CallVoidMethod(_javaObject, _methodID2_setText, P1.toJObject());
}

// *************************************************************************
// *************************************************************************

// Class ESJNI_java_lang_CharSequence (from Java path java/lang/CharSequence)

// *************************************************************************
// *************************************************************************

/*static*/ jclass ESJNI_java_lang_CharSequence::_javaClass = NULL;
/*static*/ jmethodID ESJNI_java_lang_CharSequence::_methodID1_toString = 0;

ESJNI_java_lang_CharSequence::ESJNI_java_lang_CharSequence()
{
}

ESJNI_java_lang_CharSequence::ESJNI_java_lang_CharSequence(jobject jobj)
:   ESJNIBase(jobj)
{
}

ESJNI_java_lang_CharSequence::ESJNI_java_lang_CharSequence(const ESJNI_java_lang_CharSequence &other)
:   ESJNIBase(other)
{
}

ESJNI_java_lang_CharSequence::ESJNI_java_lang_CharSequence(jobject jobj, bool retained)
:   ESJNIBase(jobj, retained)
{
}

ESJNI_java_lang_CharSequence
ESJNI_java_lang_CharSequence::getRetainedCopy(JNIEnv *jniEnv) const {
    ESAssert(_javaObject);
    return ESJNI_java_lang_CharSequence(jniEnv->NewGlobalRef(_javaObject), true/*retained*/);
}

ESJNI_java_lang_CharSequence &
ESJNI_java_lang_CharSequence::operator=(const ESJNI_java_lang_CharSequence &other) {
    _retained = other._retained;
    _javaObject = other._javaObject;
}

/*static*/ void
ESJNI_java_lang_CharSequence::initAndRetain(JNIEnv *jniEnv) {
    ESAssert(_javaClass == NULL);  // Only call once
    _javaClass = jniEnv->FindClass("java/lang/CharSequence");
    ESAssert(_javaClass);
    _javaClass = (jclass)jniEnv->NewGlobalRef(_javaClass);
}

// *****    Declared methods

ESJNI_java_lang_String
ESJNI_java_lang_CharSequence::toString(JNIEnv *jniEnv) {
    ESAssert(_javaObject); // Initialize first (retain is not necessary for the object)
    ESAssert(_javaClass);  // Call ESJNI_java_lang_CharSequence::initAndRetain first
    if (!_methodID1_toString) {
        _methodID1_toString = jniEnv->GetMethodID(_javaClass, "toString", "()Ljava/lang/String;");
        ESAssert(_methodID1_toString);
    }
    return ESJNI_java_lang_String(jniEnv->CallObjectMethod(_javaObject, _methodID1_toString));
}

// *************************************************************************
// *************************************************************************

// Class ESJNI_android_view_View (from Java path android/view/View)

// *************************************************************************
// *************************************************************************

/*static*/ jclass ESJNI_android_view_View::_javaClass = NULL;

ESJNI_android_view_View::ESJNI_android_view_View()
{
}

ESJNI_android_view_View::ESJNI_android_view_View(jobject jobj)
:   ESJNIBase(jobj)
{
}

ESJNI_android_view_View::ESJNI_android_view_View(const ESJNI_android_view_View &other)
:   ESJNIBase(other)
{
}

ESJNI_android_view_View::ESJNI_android_view_View(jobject jobj, bool retained)
:   ESJNIBase(jobj, retained)
{
}

ESJNI_android_view_View
ESJNI_android_view_View::getRetainedCopy(JNIEnv *jniEnv) const {
    ESAssert(_javaObject);
    return ESJNI_android_view_View(jniEnv->NewGlobalRef(_javaObject), true/*retained*/);
}

ESJNI_android_view_View &
ESJNI_android_view_View::operator=(const ESJNI_android_view_View &other) {
    _retained = other._retained;
    _javaObject = other._javaObject;
}

/*static*/ void
ESJNI_android_view_View::initAndRetain(JNIEnv *jniEnv) {
    ESAssert(_javaClass == NULL);  // Only call once
    _javaClass = jniEnv->FindClass("android/view/View");
    ESAssert(_javaClass);
    _javaClass = (jclass)jniEnv->NewGlobalRef(_javaClass);
}

// *****    Declared methods

ESJNI_android_widget_TextView &
ESJNI_android_view_View::castAs_android_widget_TextView() const {
    return *((ESJNI_android_widget_TextView *)this);
}

// *************************************************************************
// *************************************************************************

// Class ESJNI_android_location_Location (from Java path android/location/Location)

// *************************************************************************
// *************************************************************************

/*static*/ jclass ESJNI_android_location_Location::_javaClass = NULL;
/*static*/ jmethodID ESJNI_android_location_Location::_methodID1_getAccuracy = 0;
/*static*/ jmethodID ESJNI_android_location_Location::_methodID2_getTime = 0;
/*static*/ jmethodID ESJNI_android_location_Location::_methodID3_getLatitude = 0;
/*static*/ jmethodID ESJNI_android_location_Location::_methodID4_getLongitude = 0;

ESJNI_android_location_Location::ESJNI_android_location_Location()
{
}

ESJNI_android_location_Location::ESJNI_android_location_Location(jobject jobj)
:   ESJNIBase(jobj)
{
}

ESJNI_android_location_Location::ESJNI_android_location_Location(const ESJNI_android_location_Location &other)
:   ESJNIBase(other)
{
}

ESJNI_android_location_Location::ESJNI_android_location_Location(jobject jobj, bool retained)
:   ESJNIBase(jobj, retained)
{
}

ESJNI_android_location_Location
ESJNI_android_location_Location::getRetainedCopy(JNIEnv *jniEnv) const {
    ESAssert(_javaObject);
    return ESJNI_android_location_Location(jniEnv->NewGlobalRef(_javaObject), true/*retained*/);
}

ESJNI_android_location_Location &
ESJNI_android_location_Location::operator=(const ESJNI_android_location_Location &other) {
    _retained = other._retained;
    _javaObject = other._javaObject;
}

/*static*/ void
ESJNI_android_location_Location::initAndRetain(JNIEnv *jniEnv) {
    ESAssert(_javaClass == NULL);  // Only call once
    _javaClass = jniEnv->FindClass("android/location/Location");
    ESAssert(_javaClass);
    _javaClass = (jclass)jniEnv->NewGlobalRef(_javaClass);
}

// *****    Declared methods

float
ESJNI_android_location_Location::getAccuracy(JNIEnv *jniEnv) {
    ESAssert(_javaObject); // Initialize first (retain is not necessary for the object)
    ESAssert(_javaClass);  // Call ESJNI_android_location_Location::initAndRetain first
    if (!_methodID1_getAccuracy) {
        _methodID1_getAccuracy = jniEnv->GetMethodID(_javaClass, "getAccuracy", "()F");
        ESAssert(_methodID1_getAccuracy);
    }
    return float(jniEnv->CallFloatMethod(_javaObject, _methodID1_getAccuracy));
}

long
ESJNI_android_location_Location::getTime(JNIEnv *jniEnv) {
    ESAssert(_javaObject); // Initialize first (retain is not necessary for the object)
    ESAssert(_javaClass);  // Call ESJNI_android_location_Location::initAndRetain first
    if (!_methodID2_getTime) {
        _methodID2_getTime = jniEnv->GetMethodID(_javaClass, "getTime", "()J");
        ESAssert(_methodID2_getTime);
    }
    return long(jniEnv->CallLongMethod(_javaObject, _methodID2_getTime));
}

double
ESJNI_android_location_Location::getLatitude(JNIEnv *jniEnv) {
    ESAssert(_javaObject); // Initialize first (retain is not necessary for the object)
    ESAssert(_javaClass);  // Call ESJNI_android_location_Location::initAndRetain first
    if (!_methodID3_getLatitude) {
        _methodID3_getLatitude = jniEnv->GetMethodID(_javaClass, "getLatitude", "()D");
        ESAssert(_methodID3_getLatitude);
    }
    return double(jniEnv->CallDoubleMethod(_javaObject, _methodID3_getLatitude));
}

double
ESJNI_android_location_Location::getLongitude(JNIEnv *jniEnv) {
    ESAssert(_javaObject); // Initialize first (retain is not necessary for the object)
    ESAssert(_javaClass);  // Call ESJNI_android_location_Location::initAndRetain first
    if (!_methodID4_getLongitude) {
        _methodID4_getLongitude = jniEnv->GetMethodID(_javaClass, "getLongitude", "()D");
        ESAssert(_methodID4_getLongitude);
    }
    return double(jniEnv->CallDoubleMethod(_javaObject, _methodID4_getLongitude));
}

// *************************************************************************
// *************************************************************************

// Class ESJNI_android_location_LocationManager (from Java path android/location/LocationManager)

// *************************************************************************
// *************************************************************************

/*static*/ jclass ESJNI_android_location_LocationManager::_javaClass = NULL;
/*static*/ jmethodID ESJNI_android_location_LocationManager::_methodID1_getLastKnownLocation = 0;
/*static*/ jmethodID ESJNI_android_location_LocationManager::_methodID2_requestLocationUpdates = 0;
/*static*/ jmethodID ESJNI_android_location_LocationManager::_methodID3_removeUpdates = 0;

ESJNI_android_location_LocationManager::ESJNI_android_location_LocationManager()
{
}

ESJNI_android_location_LocationManager::ESJNI_android_location_LocationManager(jobject jobj)
:   ESJNIBase(jobj)
{
}

ESJNI_android_location_LocationManager::ESJNI_android_location_LocationManager(const ESJNI_android_location_LocationManager &other)
:   ESJNIBase(other)
{
}

ESJNI_android_location_LocationManager::ESJNI_android_location_LocationManager(jobject jobj, bool retained)
:   ESJNIBase(jobj, retained)
{
}

ESJNI_android_location_LocationManager
ESJNI_android_location_LocationManager::getRetainedCopy(JNIEnv *jniEnv) const {
    ESAssert(_javaObject);
    return ESJNI_android_location_LocationManager(jniEnv->NewGlobalRef(_javaObject), true/*retained*/);
}

ESJNI_android_location_LocationManager &
ESJNI_android_location_LocationManager::operator=(const ESJNI_android_location_LocationManager &other) {
    _retained = other._retained;
    _javaObject = other._javaObject;
}

/*static*/ void
ESJNI_android_location_LocationManager::initAndRetain(JNIEnv *jniEnv) {
    ESAssert(_javaClass == NULL);  // Only call once
    _javaClass = jniEnv->FindClass("android/location/LocationManager");
    ESAssert(_javaClass);
    _javaClass = (jclass)jniEnv->NewGlobalRef(_javaClass);
}

// *****    Declared methods

ESJNI_android_location_Location
ESJNI_android_location_LocationManager::getLastKnownLocation(JNIEnv                 *jniEnv,
                                                             ESJNI_java_lang_String P1) {
    ESAssert(_javaObject); // Initialize first (retain is not necessary for the object)
    ESAssert(_javaClass);  // Call ESJNI_android_location_LocationManager::initAndRetain first
    if (!_methodID1_getLastKnownLocation) {
        _methodID1_getLastKnownLocation = jniEnv->GetMethodID(_javaClass, "getLastKnownLocation", "(Ljava/lang/String;)Landroid/location/Location;");
        ESAssert(_methodID1_getLastKnownLocation);
    }
    return ESJNI_android_location_Location(jniEnv->CallObjectMethod(_javaObject, _methodID1_getLastKnownLocation, P1.toJObject(jniEnv)));
}

void
ESJNI_android_location_LocationManager::requestLocationUpdates(JNIEnv                                  *jniEnv,
                                                               ESJNI_java_lang_String                  P1,
                                                               long                                    P2,
                                                               float                                   P3,
                                                               ESJNI_android_location_LocationListener P4) {
    ESAssert(_javaObject); // Initialize first (retain is not necessary for the object)
    ESAssert(_javaClass);  // Call ESJNI_android_location_LocationManager::initAndRetain first
    if (!_methodID2_requestLocationUpdates) {
        _methodID2_requestLocationUpdates = jniEnv->GetMethodID(_javaClass, "requestLocationUpdates", "(Ljava/lang/String;JFLandroid/location/LocationListener;)V");
        ESAssert(_methodID2_requestLocationUpdates);
    }
    jniEnv->CallVoidMethod(_javaObject, _methodID2_requestLocationUpdates, P1.toJObject(jniEnv), P2, P3, P4.toJObject());
}

void
ESJNI_android_location_LocationManager::removeUpdates(JNIEnv                                  *jniEnv,
                                                      ESJNI_android_location_LocationListener P1) {
    ESAssert(_javaObject); // Initialize first (retain is not necessary for the object)
    ESAssert(_javaClass);  // Call ESJNI_android_location_LocationManager::initAndRetain first
    if (!_methodID3_removeUpdates) {
        _methodID3_removeUpdates = jniEnv->GetMethodID(_javaClass, "removeUpdates", "(Landroid/location/LocationListener;)V");
        ESAssert(_methodID3_removeUpdates);
    }
    jniEnv->CallVoidMethod(_javaObject, _methodID3_removeUpdates, P1.toJObject());
}

// *************************************************************************
// *************************************************************************

// Class ESJNI_java_lang_Object (from Java path java/lang/Object)

// *************************************************************************
// *************************************************************************

/*static*/ jclass ESJNI_java_lang_Object::_javaClass = NULL;

ESJNI_java_lang_Object::ESJNI_java_lang_Object()
{
}

ESJNI_java_lang_Object::ESJNI_java_lang_Object(jobject jobj)
:   ESJNIBase(jobj)
{
}

ESJNI_java_lang_Object::ESJNI_java_lang_Object(const ESJNI_java_lang_Object &other)
:   ESJNIBase(other)
{
}

ESJNI_java_lang_Object::ESJNI_java_lang_Object(jobject jobj, bool retained)
:   ESJNIBase(jobj, retained)
{
}

ESJNI_java_lang_Object
ESJNI_java_lang_Object::getRetainedCopy(JNIEnv *jniEnv) const {
    ESAssert(_javaObject);
    return ESJNI_java_lang_Object(jniEnv->NewGlobalRef(_javaObject), true/*retained*/);
}

ESJNI_java_lang_Object &
ESJNI_java_lang_Object::operator=(const ESJNI_java_lang_Object &other) {
    _retained = other._retained;
    _javaObject = other._javaObject;
}

/*static*/ void
ESJNI_java_lang_Object::initAndRetain(JNIEnv *jniEnv) {
    ESAssert(_javaClass == NULL);  // Only call once
    _javaClass = jniEnv->FindClass("java/lang/Object");
    ESAssert(_javaClass);
    _javaClass = (jclass)jniEnv->NewGlobalRef(_javaClass);
}

// *****    Declared methods

ESJNI_android_location_LocationManager &
ESJNI_java_lang_Object::castAs_android_location_LocationManager() const {
    return *((ESJNI_android_location_LocationManager *)this);
}

// *************************************************************************
// *************************************************************************

// Class ESJNI_android_location_LocationListener (from Java path android/location/LocationListener)

// *************************************************************************
// *************************************************************************

/*static*/ jclass ESJNI_android_location_LocationListener::_javaClass = NULL;

ESJNI_android_location_LocationListener::ESJNI_android_location_LocationListener()
{
}

ESJNI_android_location_LocationListener::ESJNI_android_location_LocationListener(jobject jobj)
:   ESJNIBase(jobj)
{
}

ESJNI_android_location_LocationListener::ESJNI_android_location_LocationListener(const ESJNI_android_location_LocationListener &other)
:   ESJNIBase(other)
{
}

ESJNI_android_location_LocationListener::ESJNI_android_location_LocationListener(jobject jobj, bool retained)
:   ESJNIBase(jobj, retained)
{
}

ESJNI_android_location_LocationListener
ESJNI_android_location_LocationListener::getRetainedCopy(JNIEnv *jniEnv) const {
    ESAssert(_javaObject);
    return ESJNI_android_location_LocationListener(jniEnv->NewGlobalRef(_javaObject), true/*retained*/);
}

ESJNI_android_location_LocationListener &
ESJNI_android_location_LocationListener::operator=(const ESJNI_android_location_LocationListener &other) {
    _retained = other._retained;
    _javaObject = other._javaObject;
}

/*static*/ void
ESJNI_android_location_LocationListener::initAndRetain(JNIEnv *jniEnv) {
    ESAssert(_javaClass == NULL);  // Only call once
    _javaClass = jniEnv->FindClass("android/location/LocationListener");
    ESAssert(_javaClass);
    _javaClass = (jclass)jniEnv->NewGlobalRef(_javaClass);
}

// *****    Declared methods
