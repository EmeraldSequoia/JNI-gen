//   THIS FILE IS AUTOGENERATED.  DO NOT EDIT.
//   THIS FILE IS AUTOGENERATED.  DO NOT EDIT.
//   THIS FILE IS AUTOGENERATED.  DO NOT EDIT.
//
//   ESJNIDefs.hpp
//
//   THIS FILE IS AUTOGENERATED.  DO NOT EDIT.
//   THIS FILE IS AUTOGENERATED.  DO NOT EDIT.
//   THIS FILE IS AUTOGENERATED.  DO NOT EDIT.
//
//   This file contains the generated class definitions for Java classes, methods, and fields referenced from JNI.
//   It was generated from the descriptor file ESJNI.defs.
//

#ifndef _ESJNIDEFS_HPP_
#define _ESJNIDEFS_HPP_

#include "ESJNI.hpp"

#include "jni.h"

//Forward decls
class ESJNI_android_app_Activity;
class ESJNI_android_content_res_AssetManager;
class ESJNI_android_content_res_AssetFileDescriptor;
class ESJNI_java_io_FileDescriptor;
class ESJNI_android_content_SharedPreferences;
class ESJNI_android_content_SharedPreferences_Editor;
class ESJNI_java_util_Locale;
class ESJNI_java_io_File;
class ESJNI_android_widget_TextView;
class ESJNI_java_lang_CharSequence;
class ESJNI_android_view_View;
class ESJNI_android_location_Location;
class ESJNI_android_location_LocationManager;
class ESJNI_java_lang_Object;
class ESJNI_android_location_LocationListener;

//Class definitions

class ESJNI_android_app_Activity : public ESJNIBase {
 public:
                            ESJNI_android_app_Activity();
                            ESJNI_android_app_Activity(jobject obj);
                            ESJNI_android_app_Activity(const ESJNI_android_app_Activity &other);
    ESJNI_android_app_Activity &operator=(const ESJNI_android_app_Activity &other);

    ESJNI_android_app_Activity getRetainedCopy(JNIEnv *jniEnv) const;

#ifndef NDEBUG
    virtual std::string     className() const { return "android/app/Activity"; };  // Because all of this code is generated, we can do this easily...
#endif

    // static methods
    static void             initAndRetain(JNIEnv *jniEnv);  // Obtains and retains Java handle to class; must be called before anything else

    // generated cast methods
    ESJNI_android_location_LocationListener    &castAs_android_location_LocationListener   () const;

    // generated glue methods for Java calls
    ESJNI_android_content_SharedPreferences getPreferences(JNIEnv *jniEnv,
                                                           int    P1);
    ESJNI_android_view_View findViewById(JNIEnv *jniEnv,
                                         int    P1);
    ESJNI_java_lang_Object  getSystemService(JNIEnv                 *jniEnv,
                                             ESJNI_java_lang_String P1);
    ESJNI_java_io_File      getFilesDir(JNIEnv *jniEnv);
    ESJNI_android_content_res_AssetManager getAssets(JNIEnv *jniEnv);

    // generated glue methods for Java field get/set

  private:
                            ESJNI_android_app_Activity(jobject jobj, bool retained);

    static jclass           _javaClass;

    static jmethodID        _methodID1_getPreferences;
    static jmethodID        _methodID2_findViewById;
    static jmethodID        _methodID3_getSystemService;
    static jmethodID        _methodID4_getFilesDir;
    static jmethodID        _methodID5_getAssets;
};

class ESJNI_android_content_res_AssetManager : public ESJNIBase {
 public:
                            ESJNI_android_content_res_AssetManager();
                            ESJNI_android_content_res_AssetManager(jobject obj);
                            ESJNI_android_content_res_AssetManager(const ESJNI_android_content_res_AssetManager &other);
    ESJNI_android_content_res_AssetManager &operator=(const ESJNI_android_content_res_AssetManager &other);

    ESJNI_android_content_res_AssetManager getRetainedCopy(JNIEnv *jniEnv) const;

#ifndef NDEBUG
    virtual std::string     className() const { return "android/content/res/AssetManager"; };  // Because all of this code is generated, we can do this easily...
#endif

    // static methods
    static void             initAndRetain(JNIEnv *jniEnv);  // Obtains and retains Java handle to class; must be called before anything else

    // generated cast methods

    // generated glue methods for Java calls
    ESJNI_android_content_res_AssetFileDescriptor openFd(JNIEnv                 *jniEnv,
                                                         ESJNI_java_lang_String P1);

    // generated glue methods for Java field get/set

  private:
                            ESJNI_android_content_res_AssetManager(jobject jobj, bool retained);

    static jclass           _javaClass;

    static jmethodID        _methodID1_openFd;
};

class ESJNI_android_content_res_AssetFileDescriptor : public ESJNIBase {
 public:
                            ESJNI_android_content_res_AssetFileDescriptor();
                            ESJNI_android_content_res_AssetFileDescriptor(jobject obj);
                            ESJNI_android_content_res_AssetFileDescriptor(const ESJNI_android_content_res_AssetFileDescriptor &other);
    ESJNI_android_content_res_AssetFileDescriptor &operator=(const ESJNI_android_content_res_AssetFileDescriptor &other);

    ESJNI_android_content_res_AssetFileDescriptor getRetainedCopy(JNIEnv *jniEnv) const;

#ifndef NDEBUG
    virtual std::string     className() const { return "android/content/res/AssetFileDescriptor"; };  // Because all of this code is generated, we can do this easily...
#endif

    // static methods
    static void             initAndRetain(JNIEnv *jniEnv);  // Obtains and retains Java handle to class; must be called before anything else

    // generated cast methods

    // generated glue methods for Java calls
    long                    getStartOffset(JNIEnv *jniEnv);
    long                    getLength(JNIEnv *jniEnv);
    ESJNI_java_io_FileDescriptor getFileDescriptor(JNIEnv *jniEnv);

    // generated glue methods for Java field get/set

  private:
                            ESJNI_android_content_res_AssetFileDescriptor(jobject jobj, bool retained);

    static jclass           _javaClass;

    static jmethodID        _methodID1_getStartOffset;
    static jmethodID        _methodID2_getLength;
    static jmethodID        _methodID3_getFileDescriptor;
};

class ESJNI_java_io_FileDescriptor : public ESJNIBase {
 public:
                            ESJNI_java_io_FileDescriptor();
                            ESJNI_java_io_FileDescriptor(jobject obj);
                            ESJNI_java_io_FileDescriptor(const ESJNI_java_io_FileDescriptor &other);
    ESJNI_java_io_FileDescriptor &operator=(const ESJNI_java_io_FileDescriptor &other);

    ESJNI_java_io_FileDescriptor getRetainedCopy(JNIEnv *jniEnv) const;

#ifndef NDEBUG
    virtual std::string     className() const { return "java/io/FileDescriptor"; };  // Because all of this code is generated, we can do this easily...
#endif

    // static methods
    static void             initAndRetain(JNIEnv *jniEnv);  // Obtains and retains Java handle to class; must be called before anything else

    // generated cast methods

    // generated glue methods for Java calls

    // generated glue methods for Java field get/set
    int                     fdField(JNIEnv *jniEnv) const;
    void                    setFdField(JNIEnv *jniEnv, int val);
    static bool             fdFieldValid(JNIEnv *jniEnv);
    int                     descriptorField(JNIEnv *jniEnv) const;
    void                    setDescriptorField(JNIEnv *jniEnv, int val);
    static bool             descriptorFieldValid(JNIEnv *jniEnv);

  private:
                            ESJNI_java_io_FileDescriptor(jobject jobj, bool retained);

    static jclass           _javaClass;

    static jfieldID        _fieldID1_fd;
    static jfieldID        _fieldID2_descriptor;
};

class ESJNI_android_content_SharedPreferences : public ESJNIBase {
 public:
                            ESJNI_android_content_SharedPreferences();
                            ESJNI_android_content_SharedPreferences(jobject obj);
                            ESJNI_android_content_SharedPreferences(const ESJNI_android_content_SharedPreferences &other);
    ESJNI_android_content_SharedPreferences &operator=(const ESJNI_android_content_SharedPreferences &other);

    ESJNI_android_content_SharedPreferences getRetainedCopy(JNIEnv *jniEnv) const;

#ifndef NDEBUG
    virtual std::string     className() const { return "android/content/SharedPreferences"; };  // Because all of this code is generated, we can do this easily...
#endif

    // static methods
    static void             initAndRetain(JNIEnv *jniEnv);  // Obtains and retains Java handle to class; must be called before anything else

    // generated cast methods

    // generated glue methods for Java calls
    ESJBool                 getBoolean(JNIEnv                 *jniEnv,
                                       ESJNI_java_lang_String P1,
                                       ESJBool                P2);
    ESJNI_java_lang_String  getString(JNIEnv                 *jniEnv,
                                      ESJNI_java_lang_String P1,
                                      ESJNI_java_lang_String P2);
    ESJNI_android_content_SharedPreferences_Editor edit(JNIEnv *jniEnv);

    // generated glue methods for Java field get/set

  private:
                            ESJNI_android_content_SharedPreferences(jobject jobj, bool retained);

    static jclass           _javaClass;

    static jmethodID        _methodID1_getBoolean;
    static jmethodID        _methodID2_getString;
    static jmethodID        _methodID3_edit;
};

class ESJNI_android_content_SharedPreferences_Editor : public ESJNIBase {
 public:
                            ESJNI_android_content_SharedPreferences_Editor();
                            ESJNI_android_content_SharedPreferences_Editor(jobject obj);
                            ESJNI_android_content_SharedPreferences_Editor(const ESJNI_android_content_SharedPreferences_Editor &other);
    ESJNI_android_content_SharedPreferences_Editor &operator=(const ESJNI_android_content_SharedPreferences_Editor &other);

    ESJNI_android_content_SharedPreferences_Editor getRetainedCopy(JNIEnv *jniEnv) const;

#ifndef NDEBUG
    virtual std::string     className() const { return "android/content/SharedPreferences$Editor"; };  // Because all of this code is generated, we can do this easily...
#endif

    // static methods
    static void             initAndRetain(JNIEnv *jniEnv);  // Obtains and retains Java handle to class; must be called before anything else

    // generated cast methods

    // generated glue methods for Java calls
    ESJNI_android_content_SharedPreferences_Editor putBoolean(JNIEnv                 *jniEnv,
                                                              ESJNI_java_lang_String P1,
                                                              ESJBool                P2);
    ESJNI_android_content_SharedPreferences_Editor putString(JNIEnv                 *jniEnv,
                                                             ESJNI_java_lang_String P1,
                                                             ESJNI_java_lang_String P2);
    void                    apply(JNIEnv *jniEnv);

    // generated glue methods for Java field get/set

  private:
                            ESJNI_android_content_SharedPreferences_Editor(jobject jobj, bool retained);

    static jclass           _javaClass;

    static jmethodID        _methodID1_putBoolean;
    static jmethodID        _methodID2_putString;
    static jmethodID        _methodID3_apply;
};

class ESJNI_java_util_Locale : public ESJNIBase {
 public:
                            ESJNI_java_util_Locale();
                            ESJNI_java_util_Locale(jobject obj);
                            ESJNI_java_util_Locale(const ESJNI_java_util_Locale &other);
    ESJNI_java_util_Locale  &operator=(const ESJNI_java_util_Locale &other);

    ESJNI_java_util_Locale  getRetainedCopy(JNIEnv *jniEnv) const;

#ifndef NDEBUG
    virtual std::string     className() const { return "java/util/Locale"; };  // Because all of this code is generated, we can do this easily...
#endif

    // static methods
    static void             initAndRetain(JNIEnv *jniEnv);  // Obtains and retains Java handle to class; must be called before anything else

    // generated cast methods

    // generated glue methods for Java calls
    static ESJNI_java_util_Locale  getDefault(JNIEnv *jniEnv);
    ESJNI_java_lang_String  getCountry(JNIEnv *jniEnv);

    // generated glue methods for Java field get/set

  private:
                            ESJNI_java_util_Locale(jobject jobj, bool retained);

    static jclass           _javaClass;

    static jmethodID        _methodID1_getDefault;
    static jmethodID        _methodID2_getCountry;
};

class ESJNI_java_io_File : public ESJNIBase {
 public:
                            ESJNI_java_io_File();
                            ESJNI_java_io_File(jobject obj);
                            ESJNI_java_io_File(const ESJNI_java_io_File &other);
    ESJNI_java_io_File      &operator=(const ESJNI_java_io_File &other);

    ESJNI_java_io_File      getRetainedCopy(JNIEnv *jniEnv) const;

#ifndef NDEBUG
    virtual std::string     className() const { return "java/io/File"; };  // Because all of this code is generated, we can do this easily...
#endif

    // static methods
    static void             initAndRetain(JNIEnv *jniEnv);  // Obtains and retains Java handle to class; must be called before anything else

    // generated cast methods

    // generated glue methods for Java calls
    ESJNI_java_lang_String  getPath(JNIEnv *jniEnv);

    // generated glue methods for Java field get/set

  private:
                            ESJNI_java_io_File(jobject jobj, bool retained);

    static jclass           _javaClass;

    static jmethodID        _methodID1_getPath;
};

class ESJNI_android_widget_TextView : public ESJNIBase {
 public:
                            ESJNI_android_widget_TextView();
                            ESJNI_android_widget_TextView(jobject obj);
                            ESJNI_android_widget_TextView(const ESJNI_android_widget_TextView &other);
    ESJNI_android_widget_TextView &operator=(const ESJNI_android_widget_TextView &other);

    ESJNI_android_widget_TextView getRetainedCopy(JNIEnv *jniEnv) const;

#ifndef NDEBUG
    virtual std::string     className() const { return "android/widget/TextView"; };  // Because all of this code is generated, we can do this easily...
#endif

    // static methods
    static void             initAndRetain(JNIEnv *jniEnv);  // Obtains and retains Java handle to class; must be called before anything else

    // generated cast methods

    // generated glue methods for Java calls
    ESJNI_java_lang_CharSequence getText(JNIEnv *jniEnv);
    void                    setText(JNIEnv                       *jniEnv,
                                    ESJNI_java_lang_CharSequence P1);

    // generated glue methods for Java field get/set

  private:
                            ESJNI_android_widget_TextView(jobject jobj, bool retained);

    static jclass           _javaClass;

    static jmethodID        _methodID1_getText;
    static jmethodID        _methodID2_setText;
friend class ESJNI_android_view_View;
};

class ESJNI_java_lang_CharSequence : public ESJNIBase {
 public:
                            ESJNI_java_lang_CharSequence();
                            ESJNI_java_lang_CharSequence(jobject obj);
                            ESJNI_java_lang_CharSequence(const ESJNI_java_lang_CharSequence &other);
    ESJNI_java_lang_CharSequence &operator=(const ESJNI_java_lang_CharSequence &other);

    ESJNI_java_lang_CharSequence getRetainedCopy(JNIEnv *jniEnv) const;

#ifndef NDEBUG
    virtual std::string     className() const { return "java/lang/CharSequence"; };  // Because all of this code is generated, we can do this easily...
#endif

    // static methods
    static void             initAndRetain(JNIEnv *jniEnv);  // Obtains and retains Java handle to class; must be called before anything else

    // generated cast methods

    // generated glue methods for Java calls
    ESJNI_java_lang_String  toString(JNIEnv *jniEnv);

    // generated glue methods for Java field get/set

  private:
                            ESJNI_java_lang_CharSequence(jobject jobj, bool retained);

    static jclass           _javaClass;

    static jmethodID        _methodID1_toString;
friend class ESJNI_java_lang_String;
};

class ESJNI_android_view_View : public ESJNIBase {
 public:
                            ESJNI_android_view_View();
                            ESJNI_android_view_View(jobject obj);
                            ESJNI_android_view_View(const ESJNI_android_view_View &other);
    ESJNI_android_view_View &operator=(const ESJNI_android_view_View &other);

    ESJNI_android_view_View getRetainedCopy(JNIEnv *jniEnv) const;

#ifndef NDEBUG
    virtual std::string     className() const { return "android/view/View"; };  // Because all of this code is generated, we can do this easily...
#endif

    // static methods
    static void             initAndRetain(JNIEnv *jniEnv);  // Obtains and retains Java handle to class; must be called before anything else

    // generated cast methods
    ESJNI_android_widget_TextView &castAs_android_widget_TextView() const;

    // generated glue methods for Java calls

    // generated glue methods for Java field get/set

  private:
                            ESJNI_android_view_View(jobject jobj, bool retained);

    static jclass           _javaClass;

friend class ESJNI_android_widget_TextView;
};

class ESJNI_android_location_Location : public ESJNIBase {
 public:
                            ESJNI_android_location_Location();
                            ESJNI_android_location_Location(jobject obj);
                            ESJNI_android_location_Location(const ESJNI_android_location_Location &other);
    ESJNI_android_location_Location &operator=(const ESJNI_android_location_Location &other);

    ESJNI_android_location_Location getRetainedCopy(JNIEnv *jniEnv) const;

#ifndef NDEBUG
    virtual std::string     className() const { return "android/location/Location"; };  // Because all of this code is generated, we can do this easily...
#endif

    // static methods
    static void             initAndRetain(JNIEnv *jniEnv);  // Obtains and retains Java handle to class; must be called before anything else

    // generated cast methods

    // generated glue methods for Java calls
    float                   getAccuracy(JNIEnv *jniEnv);
    long                    getTime(JNIEnv *jniEnv);
    double                  getLatitude(JNIEnv *jniEnv);
    double                  getLongitude(JNIEnv *jniEnv);

    // generated glue methods for Java field get/set

  private:
                            ESJNI_android_location_Location(jobject jobj, bool retained);

    static jclass           _javaClass;

    static jmethodID        _methodID1_getAccuracy;
    static jmethodID        _methodID2_getTime;
    static jmethodID        _methodID3_getLatitude;
    static jmethodID        _methodID4_getLongitude;
};

class ESJNI_android_location_LocationManager : public ESJNIBase {
 public:
                            ESJNI_android_location_LocationManager();
                            ESJNI_android_location_LocationManager(jobject obj);
                            ESJNI_android_location_LocationManager(const ESJNI_android_location_LocationManager &other);
    ESJNI_android_location_LocationManager &operator=(const ESJNI_android_location_LocationManager &other);

    ESJNI_android_location_LocationManager getRetainedCopy(JNIEnv *jniEnv) const;

#ifndef NDEBUG
    virtual std::string     className() const { return "android/location/LocationManager"; };  // Because all of this code is generated, we can do this easily...
#endif

    // static methods
    static void             initAndRetain(JNIEnv *jniEnv);  // Obtains and retains Java handle to class; must be called before anything else

    // generated cast methods

    // generated glue methods for Java calls
    ESJNI_android_location_Location getLastKnownLocation(JNIEnv                 *jniEnv,
                                                         ESJNI_java_lang_String P1);
    void                    requestLocationUpdates(JNIEnv                                  *jniEnv,
                                                   ESJNI_java_lang_String                  P1,
                                                   long                                    P2,
                                                   float                                   P3,
                                                   ESJNI_android_location_LocationListener P4);
    void                    removeUpdates(JNIEnv                                  *jniEnv,
                                          ESJNI_android_location_LocationListener P1);

    // generated glue methods for Java field get/set

  private:
                            ESJNI_android_location_LocationManager(jobject jobj, bool retained);

    static jclass           _javaClass;

    static jmethodID        _methodID1_getLastKnownLocation;
    static jmethodID        _methodID2_requestLocationUpdates;
    static jmethodID        _methodID3_removeUpdates;
friend class ESJNI_java_lang_Object;
};

class ESJNI_java_lang_Object : public ESJNIBase {
 public:
                            ESJNI_java_lang_Object();
                            ESJNI_java_lang_Object(jobject obj);
                            ESJNI_java_lang_Object(const ESJNI_java_lang_Object &other);
    ESJNI_java_lang_Object  &operator=(const ESJNI_java_lang_Object &other);

    ESJNI_java_lang_Object  getRetainedCopy(JNIEnv *jniEnv) const;

#ifndef NDEBUG
    virtual std::string     className() const { return "java/lang/Object"; };  // Because all of this code is generated, we can do this easily...
#endif

    // static methods
    static void             initAndRetain(JNIEnv *jniEnv);  // Obtains and retains Java handle to class; must be called before anything else

    // generated cast methods
    ESJNI_android_location_LocationManager &castAs_android_location_LocationManager() const;

    // generated glue methods for Java calls

    // generated glue methods for Java field get/set

  private:
                            ESJNI_java_lang_Object(jobject jobj, bool retained);

    static jclass           _javaClass;

};

class ESJNI_android_location_LocationListener : public ESJNIBase {
 public:
                            ESJNI_android_location_LocationListener();
                            ESJNI_android_location_LocationListener(jobject obj);
                            ESJNI_android_location_LocationListener(const ESJNI_android_location_LocationListener &other);
    ESJNI_android_location_LocationListener &operator=(const ESJNI_android_location_LocationListener &other);

    ESJNI_android_location_LocationListener getRetainedCopy(JNIEnv *jniEnv) const;

#ifndef NDEBUG
    virtual std::string     className() const { return "android/location/LocationListener"; };  // Because all of this code is generated, we can do this easily...
#endif

    // static methods
    static void             initAndRetain(JNIEnv *jniEnv);  // Obtains and retains Java handle to class; must be called before anything else

    // generated cast methods

    // generated glue methods for Java calls

    // generated glue methods for Java field get/set

  private:
                            ESJNI_android_location_LocationListener(jobject jobj, bool retained);

    static jclass           _javaClass;

};
#endif  // _ESJNIDEFS_HPP_
